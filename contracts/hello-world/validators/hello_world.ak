use aiken/collection/list
// use types_hello_world.{Datum, Redeemer}
use aiken/crypto.{VerificationKeyHash}
use aiken/primitive/string
use cardano/transaction.{OutputReference, Transaction}
use mocktail.{complete, mocktail_tx, required_signer_hash}
use mocktail/virgin_key_hash.{mock_pub_key_hash}
use mocktail/virgin_output_reference.{mock_utxo_ref}

pub type Datum {
  owner: VerificationKeyHash,
}

pub type Redeemer {
  msg: ByteArray,
}

validator hello_world {
  spend(
    datum: Option<Datum>,
    redeemer: Redeemer,
    _own_ref: OutputReference,
    self: Transaction,
  ) {
    trace @"redeemer": string.from_bytearray(redeemer.msg)
    expect Some(Datum { owner }) = datum
    let must_say_hello = redeemer.msg == "Hello, World!"
    let must_be_signed = list.has(self.extra_signatories, owner)
    must_say_hello? && must_be_signed?
  }

  else(_) {
    fail
  }
}

test hello() {
  let datum =
    Datum { owner: #"00000000000000000000000000000000000000000000000000000000" }
  let redeemer = Redeemer { msg: "Hello, World!" }
  let placeholder_utxo = OutputReference { transaction_id: "", output_index: 0 }
  let tx =
    transaction.Transaction {
      ..transaction.placeholder,
      extra_signatories: [datum.owner],
    }
  hello_world.spend(Some(datum), redeemer, placeholder_utxo, tx)
}

type TestCase {
  is_owner_signed: Bool,
}

fn get_test_tx(test_case: TestCase) {
  let TestCase { is_owner_signed } = test_case
  mocktail_tx()
    |> required_signer_hash(is_owner_signed, mock_pub_key_hash(1))
    |> complete()
}

test hello_mocktail() {
  let out_ref = mock_utxo_ref(0, 0)
  let redeemer = Redeemer { msg: "Hello, World!" }
  let test_case = TestCase { is_owner_signed: True }
  let tx = get_test_tx(test_case)
  let datum =
    Datum { owner: #"00000000000000000000000000000000000000000000000000000000" }
  hello_world.spend(Some(datum), redeemer, out_ref, tx)
}
